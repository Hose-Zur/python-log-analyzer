# === CLI ===
# Cel: pobraƒá argumenty od u≈ºytkownika i uruchomiƒá ‚Äûpipeline‚Äù:
# Reader -> (Parser -> Aggregator -> Reporter) ‚Äî na razie tylko Reader.
#
# ‚úÖ Wymagania z README (Specyfikacja CLI):
# --input (wymagane, ≈õcie≈ºka)
# --outdir (domy≈õlnie ./reports)
# --format (txt|csv|json; domy≈õlnie txt)
# --top (int; domy≈õlnie 10)
# --time-bucket (hour|day; domy≈õlnie hour)
# --limit (int; opcjonalnie)
# --fail-policy (skip|strict; domy≈õlnie skip)  # u≈ºyjesz w parserze
# --encoding (domy≈õlnie utf-8)
# --quiet (flaga)
# --version (flaga)
#
# üß© Na tym etapie (Lekcja 2):
# - U≈ºyj tylko: --input, --encoding, --limit (reszta placeholdery).
# - Po odczycie kilku linii wypisz podsumowanie (np. liczbƒô wczytanych linii)
#   albo po prostu policz je w zmiennej ‚Äî NA RAZIE BEZ PARSOWANIA.
#
# üí° Implementacyjnie sugerujƒô Typer (≈Çatwiejszy ni≈º argparse),
#    ale je≈õli nie chcesz go jeszcze u≈ºywaƒá ‚Äî zr√≥b placeholdery (komentarze).
#
# üß™ Testy CLI (smoke) w tests/test_cli.py:
# - uruchom CLI z poprawnym plikiem ‚Üí proces wychodzi statusem 0
# - uruchom z nieistniejƒÖcym plikiem ‚Üí ‚â† 0, kr√≥tki komunikat b≈Çƒôdu
#
# TODO:
# [ ] zaimportuj Typer (je≈õli u≈ºywasz) i Path (pathlib)
# [ ] stw√≥rz aplikacjƒô CLI (np. app = Typer()) ‚Äî placeholder
# [ ] zdefiniuj komendƒô g≈Ç√≥wnƒÖ i argumenty (input, encoding, limit) ‚Äî placeholder
# [ ] wewnƒÖtrz komendy: wywo≈Çaj read_log_lines(...) i policz N pierwszych linii
# [ ] je≈õli plik nie istnieje ‚Üí zako≈Ñcz z komunikatem i kodem ‚â† 0
# [ ] je≈õli quiet ‚Üí zminimalizuj wypisy
# [ ] wersja narzƒôdzia mo≈ºe byƒá brana z pyproject (na razie wpisz placeholder)
# [ ] zostaw TODO pod integracjƒô z parserem/aggregatorem/reporterem w kolejnych lekcjach

import typer
from typing_extensions import Annotated
from pathlib import Path
from enum import Enum
from typing import Optional
from .io_reader import read_log_lines


# ===== Aplikacja =====
app = typer.Typer(no_args_is_help=True)


# ===== Pomocnicze: pobieranie wersji z pyproject.toml =====
def get_version() -> str:
    """
    Czyta wersjƒô z pyproject.toml (tool.poetry.version).
    Dzia≈Ça r√≥wnie≈º w package-mode=false.
    """
    try:
        import tomllib  # python 3.11+

        root = Path(__file__).resolve().parents[2]
        pyproj = root / "pyproject.toml"

        with pyproj.open("rb") as f:
            data = tomllib.load(f)
            return data["tool"]["poetry"]["version"]

    except Exception:
        return "Error has occured, version: 0.0.0"


# ===== Globalny callback: --version dzia≈Ça bez wymagania --input =====
@app.callback(invoke_without_command=True)
def app_callback(
    version: Annotated[
        bool,
        typer.Option(
            "--version", help="Wy≈õwietl wersjƒô narzƒôdzia i zako≈Ñcz",
            is_flag=True,
            is_eager=True, # Uruchom zanim wejdziemy w komendƒô
        )
    ] = False,
):
    if version:
        typer.echo(f"python-log-analyzer {get_version()}")
        raise typer.Exit(code=0)

# ===== Enum (placeholder) =====
class ReportFormat(str, Enum):
    TXT = "txt"
    CSV = "csv"
    JSON = "json"

@app.command()
def main(
    input_path: Annotated[
        Path,
        typer.Option(
            "--input",
            help="≈öcie≈ºka do pliku log√≥w (Apache/Nginx)",
            exists=True, file_okay=True, dir_okay=False, readable=True, resolve_path=True
        )
    ],

    encoding: Annotated[
        str,
        typer.Option("--encoding", help="Kodowanie pliku log√≥w")] = "utf-8",

    limit: Annotated[
        int,
        typer.Option("--limit", help="Limit linii (0 = bez limitu)")] = 0,

    # PlaceHoldery
    preview_cap: Annotated[int, typer.Option("--preview-cap", help="PodglƒÖd: poka≈º pierwsze N linii (0=wy≈ÇƒÖczone)")] = 0,
    outdir_path: Annotated[Path, typer.Option("--outdir", help="Katalog raport√≥w")] = Path("./reports"),
    format: Annotated[ReportFormat, typer.Option(help="Format raportu: txt|csv|json")] = ReportFormat.TXT,
    top: Annotated[int, typer.Option("--top", help="Ilo≈õƒá pierwszych linijek.")] = 10,
    time_bucket: Annotated[str, typer.Option("--time-bucket", help="Jednostka grupowania czasu (hour/day)")] = "hour",
    fail_policy: Annotated[str, typer.Option("--fail-policy", help="Polityka b≈Çƒôd√≥w: skip/strict")] = "skip",
    quiet: Annotated[bool, typer.Option("--quiet", help="Tryb cichy - minimum log√≥w", is_flag=True)] = False,

    ):

    eff_limit: Optional[int] = None if (limit == 0 or limit < 0) else limit

    try:
        count = 0
        for line in read_log_lines(input_path, encoding=encoding, limit=eff_limit):
            count += 1
            if not quiet and count <= preview_cap:
                typer.echo(f"[{count}] {line}")

        if not quiet:
            typer.echo(f"Wczytano {count} linii z: {input_path}")

        raise typer.Exit(code=0)

    except FileNotFoundError as e:
        typer.echo(f"B≈ÇƒÖd: plik nie istnieje: {e}", err=True)
        raise typer.Exit(code=2)

    except PermissionError as e:
        typer.echo(f"Brak uprawnie≈Ñ do pliku: {e}", err=True)
        raise typer.Exit(code=3)

    except UnicodeDecodeError as e:
        typer.echo(f"B≈ÇƒÖd kodowania pliku ({encoding}), Spr√≥buj innym kodowaniem. Szczeg√≥≈Çy: {e}", err=True)
        raise typer.Exit(code=4)

    except OSError as e:
        typer.echo(f"B≈ÇƒÖd systemowy podczas odczytu pliku: {e}", err=True)
        raise typer.Exit(code=5)


if __name__ == "__main__":
    app()
