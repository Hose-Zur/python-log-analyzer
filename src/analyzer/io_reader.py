# === IO READER ===
# Cel: strumieniowo czytaÄ‡ pliki logÃ³w linia po linii, z obsÅ‚ugÄ… bÅ‚Ä™dÃ³w i limitem.
#
# âœ… Wymagania:
# - WejÅ›cie: Å›cieÅ¼ka do pliku (Path), encoding (str), limit (Optional[int]).
# - SprawdÅº, czy plik istnieje i jest plikiem.
# - OtwÃ³rz plik z danym encodingiem.
# - Iteruj po liniach bez wczytywania caÅ‚ego pliku do pamiÄ™ci.
# - JeÅ›li limit > 0, zakoÅ„cz po odczytaniu limitu linii.
# - Rzucaj sensowne wyjÄ…tki przy problemach (np. FileNotFoundError).
#
# ğŸ”’ BezpieczeÅ„stwo / odpornoÅ›Ä‡:
# - Nie zakÅ‚adaj poprawnego kodowania â€” obsÅ‚uÅ¼ UnicodeDecodeError (zaplanuj strategiÄ™).
# - Dodaj krÃ³tkie logowanie bÅ‚Ä™dÃ³w (pÃ³Åºniej wpiÄ™te do loggera).
#
# ğŸ“Œ Interfejs publiczny (do zrobienia):
# - funkcja: read_log_lines(path: Path, encoding: str = "utf-8", limit: Optional[int] = None)
#   - Zwraca iterator/generator linii.
#
# ğŸ§ª Testy (patrz tests/test_io_reader.py):
# - Gdy plik istnieje â†’ zwraca poprawnÄ… liczbÄ™ linii.
# - Gdy limit ustawiony â†’ zwraca dokÅ‚adnie `limit` linii.
# - Gdy plik nie istnieje â†’ odpowiedni wyjÄ…tek.
# - Gdy bÅ‚Ä™dne kodowanie â†’ zdefiniowana reakcja (np. wyjÄ…tek lub fallback).
#
# TODO:
# [ ] zaimportuj potrzebne rzeczy (pathlib.Path, typing.Optional)
# [ ] zdefiniuj sygnaturÄ™ funkcji read_log_lines(...)
# [ ] sprawdÅº istnienie pliku i poprawny typ (is_file)
# [ ] otwÃ³rz plik w try/catch, obsÅ‚uÅ¼ UnicodeDecodeError
# [ ] iteruj po liniach (for ...), yield kaÅ¼dÄ… liniÄ™
# [ ] jeÅ›li limit -> przerwij po N liniach
# [ ] dodaj minimalne docstringi (opis parametrÃ³w i wyjÄ…tkÃ³w)
# [ ] (opcjonalnie) policz liczbÄ™ linii i zwrÃ³Ä‡ w metadanych â€” na razie NIE, tylko linie
from pathlib import Path
from typing import Optional, Iterator
import logging

logger = logging.getLogger(__name__)
# logger.setLevel(logging.DEBUG) to ma ustawic cli

def read_log_lines(path: Path, encoding: str = "utf-8", limit: Optional[int]= None) -> Iterator[str]:
    """
    Generator do strumieniowego odczytu linii z pliku logu.

    Parametry:
    ----------
    path : Path
        ÅšcieÅ¼ka do pliku logu do odczytu.
    encoding : str, opcjonalnie (domyÅ›lnie "utf-8")
        Kodowanie znakÃ³w uÅ¼ywane przy otwieraniu pliku.
    limit : Optional[int], opcjonalnie
        Maksymalna liczba linii do odczytania. JeÅ›li None lub 0, odczytywane sÄ… wszystkie linie.

    Zwraca:
    --------
    Generator[str]
        Generator zwracajÄ…cy kolejne linie pliku jako stringi (bez znakÃ³w koÅ„ca linii i biaÅ‚ych znakÃ³w po prawej stronie).

    WyjÄ…tki:
    --------
    FileNotFoundError
        JeÅ›li plik nie istnieje lub nie moÅ¼na go otworzyÄ‡.
    UnicodeDecodeError
        JeÅ›li podane kodowanie jest niepoprawne. Wtedy funkcja prÃ³buje fallback na "latin-1".
        W przypadku bÅ‚Ä™du kodowania plik jest ponownie otwierany od poczÄ…tku w latin-1.

    Zachowanie:
    -----------
    - Odczytuje plik liniÄ™ po linii, bez wczytywania caÅ‚ego pliku do pamiÄ™ci.
    - W przypadku bÅ‚Ä™du kodowania prÃ³buje ponownie z kodowaniem "latin-1".
    - JeÅ›li ustawiono limit, odczyt koÅ„czy po osiÄ…gniÄ™ciu tej liczby linii.
    - Loguje bÅ‚Ä™dy (wymaga wczeÅ›niejszej konfiguracji loggera).
    """

    if not path.is_file():
        logger.error(f"File not found: {path}")
        raise FileNotFoundError(str(path))
    
    if limit is not None and limit < 0:
        raise ValueError(f"Parametr 'limit' musi byÄ‡ nieujemny, otrzymano: {limit}")

    try:
        with open(path, "r", encoding=encoding) as file:
            for count, line in enumerate(file, start=1):
                yield line.rstrip()
                if limit is not None and limit > 0 and count >= limit:
                    break
    
    except UnicodeDecodeError:
        logger.error("BÅ‚Ä…d kodowania, ponowne otwarcie pliku z latin-1")
        count = 0
        with open(path, "r", encoding="latin-1") as file:
            for count, line in enumerate(file, start=1):
                yield line.rstrip()
                if limit is not None and limit > 0 and count >= limit:
                    break
    
    except PermissionError as e:
        logger.error(f"Brak uprawnieÅ„ do pliku: {path} ({e})")
        raise PermissionError(f"Brak uprawnieÅ„ do pliku: {path}") from e
    
    except OSError as e:
        logger.error(f"BÅ‚Ä…d systemowy podczas otwierania pliku: {path} ({e})")
        raise OSError(f"BÅ‚Ä…d systemowy podczas otwierania pliku: {path}") from e