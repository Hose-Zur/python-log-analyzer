# === IO READER ===
# Cel: strumieniowo czytaÄ‡ pliki logÃ³w linia po linii, z obsÅ‚ugÄ… bÅ‚Ä™dÃ³w i limitem.
#
# âœ… Wymagania:
# - WejÅ›cie: Å›cieÅ¼ka do pliku (Path), encoding (str), limit (Optional[int]).
# - SprawdÅº, czy plik istnieje i jest plikiem.
# - OtwÃ³rz plik z danym encodingiem.
# - Iteruj po liniach bez wczytywania caÅ‚ego pliku do pamiÄ™ci.
# - JeÅ›li limit > 0, zakoÅ„cz po odczytaniu limitu linii.
# - Rzucaj sensowne wyjÄ…tki przy problemach (np. FileNotFoundError).
#
# ğŸ”’ BezpieczeÅ„stwo / odpornoÅ›Ä‡:
# - Nie zakÅ‚adaj poprawnego kodowania â€” obsÅ‚uÅ¼ UnicodeDecodeError (zaplanuj strategiÄ™).
# - Dodaj krÃ³tkie logowanie bÅ‚Ä™dÃ³w (pÃ³Åºniej wpiÄ™te do loggera).
#
# ğŸ“Œ Interfejs publiczny (do zrobienia):
# - funkcja: read_log_lines(path: Path, encoding: str = "utf-8", limit: Optional[int] = None)
#   - Zwraca iterator/generator linii.
#
# ğŸ§ª Testy (patrz tests/test_io_reader.py):
# - Gdy plik istnieje â†’ zwraca poprawnÄ… liczbÄ™ linii.
# - Gdy limit ustawiony â†’ zwraca dokÅ‚adnie `limit` linii.
# - Gdy plik nie istnieje â†’ odpowiedni wyjÄ…tek.
# - Gdy bÅ‚Ä™dne kodowanie â†’ zdefiniowana reakcja (np. wyjÄ…tek lub fallback).
#
# TODO:
# [ ] zaimportuj potrzebne rzeczy (pathlib.Path, typing.Optional)
# [ ] zdefiniuj sygnaturÄ™ funkcji read_log_lines(...)
# [ ] sprawdÅº istnienie pliku i poprawny typ (is_file)
# [ ] otwÃ³rz plik w try/catch, obsÅ‚uÅ¼ UnicodeDecodeError
# [ ] iteruj po liniach (for ...), yield kaÅ¼dÄ… liniÄ™
# [ ] jeÅ›li limit -> przerwij po N liniach
# [ ] dodaj minimalne docstringi (opis parametrÃ³w i wyjÄ…tkÃ³w)
# [ ] (opcjonalnie) policz liczbÄ™ linii i zwrÃ³Ä‡ w metadanych â€” na razie NIE, tylko linie
